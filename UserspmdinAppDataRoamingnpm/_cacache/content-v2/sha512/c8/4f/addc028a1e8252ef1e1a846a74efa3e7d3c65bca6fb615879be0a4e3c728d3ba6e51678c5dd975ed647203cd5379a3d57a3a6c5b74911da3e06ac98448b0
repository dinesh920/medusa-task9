{"_id":"@stdlib/array-uint32","_rev":"11-f47cbc07569a3cc7d386b5e2aca976e7","name":"@stdlib/array-uint32","dist-tags":{"latest":"0.2.2"},"versions":{"0.0.1":{"name":"@stdlib/array-uint32","version":"0.0.1","keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"author":{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"},"license":"Apache-2.0","_id":"@stdlib/array-uint32@0.0.1","maintainers":[{"name":"rreusser","email":"rsreusser@gmail.com"},{"name":"stdlib-bot","email":"kgryte@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"}],"contributors":[{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"}],"homepage":"https://github.com/stdlib-js/stdlib","bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"os":["aix","darwin","freebsd","linux","macos","openbsd","sunos","win32","windows"],"dist":{"shasum":"def8fef47753329c600d8dca32c2a15bbfd2fabd","tarball":"https://registry.npmjs.org/@stdlib/array-uint32/-/array-uint32-0.0.1.tgz","fileCount":8,"integrity":"sha512-lce7FnxrRviXBONdTepEiK/XIOtHd4MsvZ+e37l30SFXgxgXv0ZHfN4U6/nofOHK4F3oaVe41RRyuet520aLFA==","signatures":[{"sig":"MEUCIHcfY5qdMs/XSUV2xndOcWR/4VP0H0+bOpONEvXOQKzrAiEAjRUJWX3qtLD00dwk/vw7b/FU0pXxzC2dcnG2+s6C3NI=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":76216,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgyM53CRA9TVsSAnZWagAAKVMP/AgIU0tlSZw1HeOEq8ZX\n/0EOo+Sp0Uz7kJKA3nH63AEpeWGMmTLboFalcEZurdWLnGXBryFw5OmduG9X\nNKvwtCWIUmfp1Vk7C5ted88P08UKyZIHXkzgoGlJMadj6Rh6gcKzm98Ox4/2\nBibwarL+INxKYsVGnP/8cBlJigbFFhnSsRN+bJPBBDgp3+zv/thiwG1UlDT8\nRLvhhvGCQZDuA2kEML7EJCBNtII+YB7F46lWdA/XR6Q6hwD1311tM1L9Oaxh\nQl5ESrjaPzkvLABwrSMu4rGcRbsavYwty9a4ey0xxI5wbLjQz0ExnuEpIfY8\n0ZkKV9WPfrcpCiMesbKXRVkXM5zEJuFPM8zyc/TVQwLz3tdDAoJ02soZE5dH\npyeBV0wPAWAq9K4yqMta7bZWQ/pUiEMNFw+aYtopot6bqAbj9rusmRSbEq5Z\nE8vRglR6I+QOqe/mH4AESUtvTXcrYrcPPeWxKHqInWr/H+4XWmKJN2uqgYMw\nG8x3K+ba7/gFVTBA65sgU5547UpskcJ0KiIEuFThBhXegmNDGZNmdz/7/b8B\ncgwyS3Gwe/GHsE4Di0q0RwS4Ygy2Rmn+fPERdc7msWIshdmGItox4HYQAox9\nGa30um2uRiNcRkDOs+Z9GgpYl4P4l0wTo7izKVUQ8Eynu8pWh+mXi51wIHYG\nEiUq\r\n=VxlM\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib","types":"./docs/types","engines":{"npm":">2.7.0","node":">=0.10.0"},"funding":{"url":"https://www.patreon.com/athan","type":"patreon"},"gitHead":"b80b2e368b3f0208c13774a5d7dfd61baa9e1353","scripts":{"test":"make test","examples":"make examples","test-cov":"make test-cov","benchmark":"make benchmark"},"_npmUser":{"name":"stdlib-bot","email":"kgryte@gmail.com"},"repository":{"url":"git://github.com/stdlib-js/array-uint32.git","type":"git"},"_npmVersion":"7.7.6","description":"Uint32Array.","directories":{"doc":"./docs","lib":"./lib","test":"./test","example":"./examples","benchmark":"./benchmark"},"_nodeVersion":"15.14.0","dependencies":{"@stdlib/assert-has-uint32array-support":"^0.0.x"},"_hasShrinkwrap":false,"devDependencies":{"tape":"git+https://github.com/kgryte/tape.git#fix/globby","istanbul":"^0.4.1","tap-spec":"5.x.x","proxyquire":"^2.0.0","@stdlib/bench":"^0.0.x","@stdlib/symbol-iterator":"^0.0.x","@stdlib/assert-is-boolean":"^0.0.x","@stdlib/random-base-randi":"^0.0.x","@stdlib/random-base-randu":"^0.0.x","@stdlib/assert-is-function":"^0.0.x","@stdlib/assert-has-property":"^0.0.x","@stdlib/assert-is-arraybuffer":"^0.0.x","@stdlib/assert-is-uint32array":"^0.0.x","@stdlib/math-base-special-pow":"^0.0.x","@stdlib/math-base-special-round":"^0.0.x","@stdlib/assert-is-nonnegative-integer":"^0.0.x"},"_npmOperationalInternal":{"tmp":"tmp/array-uint32_0.0.1_1623772791718_0.1832964362937335","host":"s3://npm-registry-packages"}},"0.0.2":{"name":"@stdlib/array-uint32","version":"0.0.2","keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"author":{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"},"license":"Apache-2.0","_id":"@stdlib/array-uint32@0.0.2","maintainers":[{"name":"rreusser","email":"rsreusser@gmail.com"},{"name":"stdlib-bot","email":"kgryte@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"}],"contributors":[{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"}],"homepage":"https://github.com/stdlib-js/stdlib","bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"os":["aix","darwin","freebsd","linux","macos","openbsd","sunos","win32","windows"],"dist":{"shasum":"d73a0ce2136e2cf8d1ae618df6e659015cc84a83","tarball":"https://registry.npmjs.org/@stdlib/array-uint32/-/array-uint32-0.0.2.tgz","fileCount":11,"integrity":"sha512-UuLEzlKRNZbMehOhW77ZsV8qjwGECqOzYvOXNtYNPwwgcAUyTQrBsr+Yh2+4h+TKNiNGFdgUdZXyp7anku39xQ==","signatures":[{"sig":"MEUCIQDtJ7HDYb5h+DZSS/G9gzWfjb+j67Ntl6HXCeGMaSmMJQIgYCcLRFRVgZmH7zUqOm+G23AJIJgc+7CRMPjLpEZFcgc=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":86696,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgyYaGCRA9TVsSAnZWagAAqZ4P/js0/1Depp4chYBRl0tw\naf8PsiBE+sX+AGRyiG8bBcaO+g5pVy7jAv0+AJw3Px7HPSVTldrzneZwZGID\nfwcGWNKEoqHIu2GlbkKjhvved4f1JjK0Qp8pxU/u98uQBXWpWD/sj5RO7MY3\nsRLSZXMsdHyMIgU6xmT2O299kvQJrsJvT8gqdrBI2E+8mpRVzUtSDIrpVHmu\nr4E+dM1iEqlhD+i5V+Ffji6K6NFdQN91FoTXCS6RZCLy29odDClKY5VwcEan\nPFM2mwtBzRcMrq6arpmoMjjBzgFCxNuW2tr2VfPcw2ZzePiBaItEs+zZ+Q77\ntxiOeERsWag4i2AI25Wd5ZrqlxmDt9r0HD5ylIKYOf97i7WhD46KB3vauGon\nDZxrWmLhX/89VLmQ/P3Yi4Irekeee2+G6pDb8pFbcCdl8zkQBQQv2tQwBNJK\na4+t/oBWYujoMEYfSQC94LyNSFiABbNR9PEoIa57Ci+fTv6J6DRbWvQd2Sr7\na57uBkb+L06/ixcc72SzI7OGbOuJpoeRxeNYcnEhsQ0oTfclsp/9u6vPVIP9\nNny8c8WnrcnmPjIl1IOMFApgqL7ZHDnnU1a8gALoIc7WdRKFn8Hk6/BtUamL\nQOxff2F2P7o80gBp6nJ/MDzXY+Av/6QHO83yiiw41UUozsEBamwIucvxsKvG\n/GJm\r\n=vX05\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib","types":"./docs/types","engines":{"npm":">2.7.0","node":">=0.10.0"},"funding":{"url":"https://www.patreon.com/athan","type":"patreon"},"gitHead":"ad8b3789b76b72f3e867f250fe03c02c6372c931","scripts":{"test":"make test","examples":"make examples","test-cov":"make test-cov","benchmark":"make benchmark"},"_npmUser":{"name":"stdlib-bot","email":"kgryte@gmail.com"},"repository":{"url":"git://github.com/stdlib-js/array-uint32.git","type":"git"},"_npmVersion":"7.7.6","description":"Uint32Array.","directories":{"doc":"./docs","lib":"./lib","test":"./test","example":"./examples","benchmark":"./benchmark"},"_nodeVersion":"15.14.0","dependencies":{"@stdlib/assert-has-uint32array-support":"^0.0.x"},"_hasShrinkwrap":false,"devDependencies":{"tape":"git+https://github.com/kgryte/tape.git#fix/globby","istanbul":"^0.4.1","tap-spec":"5.x.x","proxyquire":"^2.0.0","@stdlib/bench":"^0.0.x","@stdlib/symbol-iterator":"^0.0.x","@stdlib/assert-is-boolean":"^0.0.x","@stdlib/random-base-randi":"^0.0.x","@stdlib/random-base-randu":"^0.0.x","@stdlib/assert-is-function":"^0.0.x","@stdlib/assert-has-property":"^0.0.x","@stdlib/assert-is-arraybuffer":"^0.0.x","@stdlib/assert-is-uint32array":"^0.0.x","@stdlib/math-base-special-pow":"^0.0.x","@stdlib/math-base-special-round":"^0.0.x","@stdlib/assert-is-nonnegative-integer":"^0.0.x"},"_npmOperationalInternal":{"tmp":"tmp/array-uint32_0.0.2_1623819910286_0.8544133801209874","host":"s3://npm-registry-packages"}},"0.0.3":{"name":"@stdlib/array-uint32","version":"0.0.3","keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"author":{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"},"license":"Apache-2.0","_id":"@stdlib/array-uint32@0.0.3","maintainers":[{"name":"rreusser","email":"rsreusser@gmail.com"},{"name":"stdlib-bot","email":"kgryte@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"}],"contributors":[{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"}],"homepage":"https://stdlib.io","bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"os":["aix","darwin","freebsd","linux","macos","openbsd","sunos","win32","windows"],"dist":{"shasum":"1b1408287832fd4ea5f3df3de5b186f2bba5374c","tarball":"https://registry.npmjs.org/@stdlib/array-uint32/-/array-uint32-0.0.3.tgz","fileCount":11,"integrity":"sha512-6JqrdsYTrfZQPjujqAlzKBU4BsyVcqdqURhrB5Ydj/N6uwEEhjfbgQw1eNWKA6443S4nWvhpqKEFANW4QV+ltg==","signatures":[{"sig":"MEQCICvybh+ebS21ck4S0dpkfgTKY9Xt9PuLGJn4v/mJpJjJAiBn1W6yF6W0rZqsoqpZqvBquoTmpWfGfNiasxTiCg3Y0Q==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":86850,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg2QkWCRA9TVsSAnZWagAAR04QAKMBJEv6NhcZ96RKTyeP\nbJjy/DM4GSiq7pKJRtKhm5JIxf8QN+DBLyvTBRJ1IfdvadfQyQXd7HlnoOVs\nfINgYwlG/1zAkbCrdg66ah5w17lS2h4vKbzIKzIadtrYGrOmBGsLFo+HH5SI\nTym4t3HNmB2uaLeCs2+B45cxxaoSA7Wzou9xMADvU7UsdnZSKWBKNy8CaIuG\nbd7nsx+ps3ibpNReYrvAddqE4HKZzZwTZv7keNss2PsvGRE1Jmwy1JDdc8Up\nXg52B8Vil5gGUQUkByYfQqCJGTzRxYIfB5lcBDPIAbIHE3cfrZ9LnW3/Ekzd\nPEHaYU5EqEYLkcnchelPABaYLuRnRMkW9+/m0ZV/hm3DQxTBlhi4ErOdXJrl\nP5UkSmMEc4Odl/L3qDb4fgZqApC8LtJGg3X3zCphTlSSvdGeGx9VvKGKVo6W\nCAS3GLeY2O1b+v8oNheemELhJQVaaAJmj75FGR4dm8VUvjUpbCDatC0aBtHM\nq8ffVcnEcy9ruhO0CfPB0tZkWTCCv4U0otbH1yp13b5gUjU6mUa+pkuAFqJi\nBWLK1z+Zbm1R8Lt9zCAuuGyfKzrwP1RCmFCKl3zEN8x7xBBqa38y5dW//x+b\nrc9DcxjI++Lm4UA0zBatMS6dgLxrWqc8xT7JEqNb7VoV4DDnDKEZjNg3Hk/r\nTbAV\r\n=cHfF\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib","types":"./docs/types","engines":{"npm":">2.7.0","node":">=0.10.0"},"funding":{"url":"https://www.patreon.com/athan","type":"patreon"},"gitHead":"28f07d958ef5e81bd0522de7c02f02655654a88d","scripts":{"test":"make test","examples":"make examples","test-cov":"make test-cov","benchmark":"make benchmark"},"_npmUser":{"name":"stdlib-bot","email":"kgryte@gmail.com"},"repository":{"url":"git://github.com/stdlib-js/array-uint32.git","type":"git"},"_npmVersion":"7.7.6","description":"Uint32Array.","directories":{"doc":"./docs","lib":"./lib","test":"./test","example":"./examples","benchmark":"./benchmark"},"_nodeVersion":"15.14.0","dependencies":{"@stdlib/assert-has-uint32array-support":"^0.0.x"},"_hasShrinkwrap":false,"devDependencies":{"tape":"git+https://github.com/kgryte/tape.git#fix/globby","istanbul":"^0.4.1","tap-spec":"5.x.x","proxyquire":"^2.0.0","@stdlib/bench":"^0.0.x","@stdlib/symbol-iterator":"^0.0.x","@stdlib/assert-is-boolean":"^0.0.x","@stdlib/random-base-randi":"^0.0.x","@stdlib/random-base-randu":"^0.0.x","@stdlib/assert-is-function":"^0.0.x","@stdlib/assert-has-property":"^0.0.x","@stdlib/assert-is-arraybuffer":"^0.0.x","@stdlib/assert-is-uint32array":"^0.0.x","@stdlib/math-base-special-pow":"^0.0.x","@stdlib/math-base-special-round":"^0.0.x","@stdlib/assert-is-nonnegative-integer":"^0.0.x"},"_npmOperationalInternal":{"tmp":"tmp/array-uint32_0.0.3_1624836373656_0.6096960856490372","host":"s3://npm-registry-packages"}},"0.0.4":{"name":"@stdlib/array-uint32","version":"0.0.4","keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"author":{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"},"license":"Apache-2.0","_id":"@stdlib/array-uint32@0.0.4","maintainers":[{"name":"rreusser","email":"rsreusser@gmail.com"},{"name":"stdlib-bot","email":"kgryte@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"}],"contributors":[{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"}],"homepage":"https://stdlib.io","bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"os":["aix","darwin","freebsd","linux","macos","openbsd","sunos","win32","windows"],"dist":{"shasum":"b781264acc586c21652032e6dfdebd98236dc738","tarball":"https://registry.npmjs.org/@stdlib/array-uint32/-/array-uint32-0.0.4.tgz","fileCount":11,"integrity":"sha512-Sj1pZqHEmM3YoAeSWq6EmlkLmHF5ajIzRfeMsGAcsRAA39mTo3B4m8kOw6BPxVQ8BE0oeWJ2RrYL7O4z5HOriw==","signatures":[{"sig":"MEQCIBECz9vkZJvst5Db71oM4kuP/cRMjc+WizkEAqN5y/SgAiBM6e4yr0AD2Huk/TU0yeoaEi0VEt2i6ElyYkbECE0s2w==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":86850,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg5Pz4CRA9TVsSAnZWagAArqIP/1njTyeUEsljlY8X/hGU\nDfjtiHqrL81p4aC3zRWQ8w+sHDEqlWiAZi1ymnQ7dvcuXwmHF+NejLQ2mcYh\nimXzjafw5hjC8zrtEVOMZsWGYxWGlsJQESyItL37aZbZxu+7Xd8tmCm9dvmm\nxAs39eVmY7qGBenwGgyfQEIplTEf8+vHyXtKOUjxwOR0EeWhrS+5AeKRXHBJ\n015bNrHeXd/0oOeHr6oOXoFcBEktO7yXWHYzNfijFqe9VYsusSmcI6aHVk5w\nAJEJ9ZRFZPfb3IE2cMc7UXztH1To4hTRh/gKiSuPb3+5TTBxrfCeRhMM2Y6Z\ntn8AdVAtawliiQa5zGmOBkTwMGX6d4qNP6LIkW/YazKaf8d4YUdTLwqkyOn1\n9VS9NtWmcq8+hxN5X87S0uOT1kb2LqZSwX7zMmQAqNvrOdK9+goyqo3BZmGs\ni/pPM6D84oB7qkFMR4iWaZ/6rU/sukXes0CI3ZsnLk/iy7leAv0F+12tX/VU\nKYJ3BLn+mcoSR9uj2Bdr4xdN19ztzc5ImZTxD5MCPH/h3iH6A0YBsJ2G5+Qn\n6as4cgP0KL5pZ1c7CLOCdf4vdKsyDHb1S21dRA9ava2nXbKYG19t4EhJ10kH\n64du7VqY3SLF436/hM5zyAMSIIKI/gGQK64vP2PJ8kDah96iEgeynVOMNekJ\ns4k8\r\n=qFlH\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib","types":"./docs/types","engines":{"npm":">2.7.0","node":">=0.10.0"},"funding":{"url":"https://www.patreon.com/athan","type":"patreon"},"gitHead":"f5d98456dc438d8571e96be79846bcb89ffba430","scripts":{"test":"make test","examples":"make examples","test-cov":"make test-cov","benchmark":"make benchmark"},"_npmUser":{"name":"stdlib-bot","email":"kgryte@gmail.com"},"repository":{"url":"git://github.com/stdlib-js/array-uint32.git","type":"git"},"_npmVersion":"7.7.6","description":"Uint32Array.","directories":{"doc":"./docs","lib":"./lib","test":"./test","example":"./examples","benchmark":"./benchmark"},"_nodeVersion":"15.14.0","dependencies":{"@stdlib/assert-has-uint32array-support":"^0.0.x"},"_hasShrinkwrap":false,"devDependencies":{"tape":"git+https://github.com/kgryte/tape.git#fix/globby","istanbul":"^0.4.1","tap-spec":"5.x.x","proxyquire":"^2.0.0","@stdlib/bench":"^0.0.x","@stdlib/symbol-iterator":"^0.0.x","@stdlib/assert-is-boolean":"^0.0.x","@stdlib/random-base-randi":"^0.0.x","@stdlib/random-base-randu":"^0.0.x","@stdlib/assert-is-function":"^0.0.x","@stdlib/assert-has-property":"^0.0.x","@stdlib/assert-is-arraybuffer":"^0.0.x","@stdlib/assert-is-uint32array":"^0.0.x","@stdlib/math-base-special-pow":"^0.0.x","@stdlib/math-base-special-round":"^0.0.x","@stdlib/assert-is-nonnegative-integer":"^0.0.x"},"_npmOperationalInternal":{"tmp":"tmp/array-uint32_0.0.4_1625619703673_0.781246358431066","host":"s3://npm-registry-packages"}},"0.0.5":{"name":"@stdlib/array-uint32","version":"0.0.5","keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"author":{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"},"license":"Apache-2.0","_id":"@stdlib/array-uint32@0.0.5","maintainers":[{"name":"stdlib-bot","email":"kgryte@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"contributors":[{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"}],"homepage":"https://stdlib.io","bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"os":["aix","darwin","freebsd","linux","macos","openbsd","sunos","win32","windows"],"dist":{"shasum":"69a83e40f7c128942570ac997e1944c35a63dc8e","tarball":"https://registry.npmjs.org/@stdlib/array-uint32/-/array-uint32-0.0.5.tgz","fileCount":10,"integrity":"sha512-4hCIixPLqLtMGF0L+4MxHKS8MHPpNsdl0yHuWf9XTj5GOJ1N86rwS7ZW6e0qpg45HbXSOey4+yXm8Kin5XO64A==","signatures":[{"sig":"MEUCIQDnnXVmQ8385x3KAP9t+immjeKz2V6Tfsto03cfAjcPuwIgGZtzFQc5r00CtNe2fn24exei08zCQ92lCSbWlxP8BXM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":86732,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhIrD5CRA9TVsSAnZWagAA8PsP/0LWpIvNzlnrRv+o+2Sr\nJBtyoXB/RsnKUmed+tsGQjsHPlJoeDtOR6Ml46I5GDeNJIosZudAdawuUP7V\nsFwCrw4qybHyqT+y6XVMnnOvv1Zkr/rZ6QtYf6HQRWxKdoVW/1/bIszdY5Td\nDjMAvHxkiLpxzF0B1S382neKTdv6HKT3x/0ty4+q//sFgvGWkd/NxxPXW988\nmLbGmLltb3ratICe1qfz0Edaw8G91IPUN15P4SSO2A3OQJ1J3uS949YIdLSa\nOIJsajTDMQPS/cpUO6asBlatHaABfEoe3NTgXcTM/z7sonoF0KP/gZQSJrS2\neBQ8tk2Ju/49XuccvUQ/puOVMg6xdB9E1fnIIVVPwpsrZJxMIF+BYgPJNXhS\n7yRI/2JAEfFgE8EdYvF9wojGXDVWXj6SjvgfIJfoozdZaEPjEflSOlRpAXqs\nyxUyjPd6uE/q1fOPQ8qdMg3BxxKTdMoubstNfbkJAyJvM/PPUOAHSssGk9ae\nmc1cCYP4Btc18Wfa0vt3+AE7vV6/Wv+1BCXDc5cAA4xVZndkvm4Ct/saiW3W\nzrd5aYV7m8mTmlHaLXY3x590vrKwl/pllknM2m5djhj21VuwEcsH1bhIDExt\nqRV0+S9b+umO9qm2mHHhQlMuxrG7Vt1ztxEgpjH/UJMTMEyFg63/wfkJPxAk\no+x0\r\n=KBJH\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib","types":"./docs/types","engines":{"npm":">2.7.0","node":">=0.10.0"},"funding":{"url":"https://www.patreon.com/athan","type":"patreon"},"gitHead":"381418507fd6dc9ca59ce6a3d05b2c9b1e4b2a0e","scripts":{"test":"make test","examples":"make examples","test-cov":"make test-cov","benchmark":"make benchmark"},"_npmUser":{"name":"stdlib-bot","email":"kgryte@gmail.com"},"repository":{"url":"git://github.com/stdlib-js/array-uint32.git","type":"git"},"_npmVersion":"7.20.3","description":"Uint32Array.","directories":{"doc":"./docs","lib":"./lib","test":"./test","example":"./examples","benchmark":"./benchmark"},"_nodeVersion":"16.7.0","dependencies":{"@stdlib/assert-has-uint32array-support":"^0.0.x"},"_hasShrinkwrap":false,"devDependencies":{"tape":"git+https://github.com/kgryte/tape.git#fix/globby","istanbul":"^0.4.1","tap-spec":"5.x.x","proxyquire":"^2.0.0","@stdlib/bench":"^0.0.x","@stdlib/symbol-iterator":"^0.0.x","@stdlib/assert-is-boolean":"^0.0.x","@stdlib/random-base-randi":"^0.0.x","@stdlib/random-base-randu":"^0.0.x","@stdlib/assert-is-function":"^0.0.x","@stdlib/assert-has-property":"^0.0.x","@stdlib/assert-is-arraybuffer":"^0.0.x","@stdlib/assert-is-uint32array":"^0.0.x","@stdlib/math-base-special-pow":"^0.0.x","@stdlib/math-base-special-round":"^0.0.x","@stdlib/assert-is-nonnegative-integer":"^0.0.x"},"_npmOperationalInternal":{"tmp":"tmp/array-uint32_0.0.5_1629663481600_0.14230292004847378","host":"s3://npm-registry-packages"}},"0.0.6":{"name":"@stdlib/array-uint32","version":"0.0.6","keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"author":{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"},"license":"Apache-2.0","_id":"@stdlib/array-uint32@0.0.6","maintainers":[{"name":"stdlib-bot","email":"kgryte@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"contributors":[{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"}],"homepage":"https://stdlib.io","bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"os":["aix","darwin","freebsd","linux","macos","openbsd","sunos","win32","windows"],"dist":{"shasum":"5a923576475f539bfb2fda4721ea7bac6e993949","tarball":"https://registry.npmjs.org/@stdlib/array-uint32/-/array-uint32-0.0.6.tgz","fileCount":10,"integrity":"sha512-2hFPK1Fg7obYPZWlGDjW9keiIB6lXaM9dKmJubg/ergLQCsJQJZpYsG6mMAfTJi4NT1UF4jTmgvyKD+yf0D9cA==","signatures":[{"sig":"MEUCIFJ+RcfljOJJyx8NLFn0nC4c8Avburhdi3CH5Uwhznr5AiEA1uKNoQzKIjcpd6NcUwzFiek5viQ9f6UFRrQQo8fy3oM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":89378,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiDU/yCRA9TVsSAnZWagAAgjgP+QFABZre9VZKJPUuMtok\nXQ2+GwlgEDscnZvV0rjqL0Fubq+jgWJVr8BKow4YQOq29L/kd7n0yjaLxEY9\nEYskH9au02KhpxZCho0fADhw32/E8G/1YX44pL8S4/+h9wKSsZGrRf58BdTs\nNaxbvPS86OM4kjM+k34YBo4szOSWCpbHBBrlfREAZFW4waivGQGMMtQqhRTj\ni0g6DETW+6KULUmvA3Woef9Dq6MWukMacEnGcbQ5QAf13HtIJwY9/jJsdyU0\na63ViOFoGiV8wCire4Dd+21KHDIaVt34dqy1/YR+Q/mJf+xMXogCzaDD6sa/\nrzOTKI79tDWJsKxesOPskJ6xuKnzi8wAgjClHQBWKwR3utqwciXbXs3TJr19\narVmA5KCp1w0lL7qGm/Vip5zP8te0nHbdm4Y17WcEjO25T/PdMXTL1KBgQWx\n+YjbeAeaKFan6PMzHcmNyEdvbtXhRmENFYDa8Oz4Wp57OHjrZqRGVlfgb1gQ\n88Evh0pOBTiwwAohGgQo9fRFTKaCvqMs7WhCIemARAgmypSfdZF2gBMgDPZo\n2JPagthOh86DciwL7c8R+E72SfGqljZNV6X6K0b3BIxodHIhAVltrpdT8/kA\n3sY2C8w/dYOSVUcdfVnzr56aZhgTEcm1LMOg/vRiUCB/ggjs18ZLk3F6XG2u\nc4r2\r\n=VJXp\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib","types":"./docs/types","engines":{"npm":">2.7.0","node":">=0.10.0"},"funding":{"url":"https://www.patreon.com/athan","type":"patreon"},"gitHead":"5ba72155bf2d84b70561932007d5c34a6757e3c4","scripts":{"test":"make test","examples":"make examples","test-cov":"make test-cov","benchmark":"make benchmark"},"_npmUser":{"name":"stdlib-bot","email":"kgryte@gmail.com"},"repository":{"url":"git://github.com/stdlib-js/array-uint32.git","type":"git"},"_npmVersion":"8.1.2","description":"Uint32Array.","directories":{"doc":"./docs","lib":"./lib","test":"./test","example":"./examples","benchmark":"./benchmark"},"_nodeVersion":"16.13.2","dependencies":{"@stdlib/assert-has-uint32array-support":"^0.0.x"},"_hasShrinkwrap":false,"devDependencies":{"tape":"git+https://github.com/kgryte/tape.git#fix/globby","istanbul":"^0.4.1","tap-spec":"5.x.x","proxyquire":"^2.0.0","@stdlib/bench":"^0.0.x","@stdlib/symbol-iterator":"^0.0.x","@stdlib/assert-is-boolean":"^0.0.x","@stdlib/random-base-randi":"^0.0.x","@stdlib/random-base-randu":"^0.0.x","@stdlib/assert-is-function":"^0.0.x","@stdlib/assert-has-property":"^0.0.x","@stdlib/assert-is-arraybuffer":"^0.0.x","@stdlib/assert-is-uint32array":"^0.0.x","@stdlib/math-base-special-pow":"^0.0.x","@stdlib/math-base-special-round":"^0.0.x","@stdlib/assert-is-nonnegative-integer":"^0.0.x"},"_npmOperationalInternal":{"tmp":"tmp/array-uint32_0.0.6_1645039601951_0.1271812749810508","host":"s3://npm-registry-packages"}},"0.1.0":{"name":"@stdlib/array-uint32","version":"0.1.0","keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"author":{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"},"license":"Apache-2.0","_id":"@stdlib/array-uint32@0.1.0","maintainers":[{"name":"stdlib-bot","email":"kgryte+stdlibbot@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"contributors":[{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"}],"homepage":"https://stdlib.io","bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"os":["aix","darwin","freebsd","linux","macos","openbsd","sunos","win32","windows"],"dist":{"shasum":"b096e042440440aaafa2d4f501826f3b9b4d7d77","tarball":"https://registry.npmjs.org/@stdlib/array-uint32/-/array-uint32-0.1.0.tgz","fileCount":12,"integrity":"sha512-NfQjFIsK4KjlOOCyQ6qgIajf6p2UKU8sjY4Q2e1Gfmq8APJxl+YBTAl9hf9M5wF+FwAy+FFHxGyT3SeS1+phKg==","signatures":[{"sig":"MEQCIHSMqi/Dl7T83UXBhfb5yXYUsrSxTBqBZAn3AvDgufB3AiBCR4fhUpkdiFHOksXB64tGP0PpSV6GI9Gr/jEh73dcMA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":58694},"main":"./lib","types":"./docs/types","engines":{"npm":">2.7.0","node":">=0.10.0"},"funding":{"url":"https://opencollective.com/stdlib","type":"opencollective"},"gitHead":"41f86d99cbb03d63f33b26b5a608ebc8703e045f","scripts":{"test":"make test","examples":"make examples","test-cov":"make test-cov","benchmark":"make benchmark"},"_npmUser":{"name":"stdlib-bot","email":"kgryte+stdlibbot@gmail.com"},"repository":{"url":"git://github.com/stdlib-js/array-uint32.git","type":"git"},"_npmVersion":"8.19.4","description":"Uint32Array.","directories":{"doc":"./docs","lib":"./lib","test":"./test","example":"./examples","benchmark":"./benchmark"},"_nodeVersion":"16.20.2","dependencies":{"@stdlib/assert-has-uint32array-support":"^0.1.0"},"_hasShrinkwrap":false,"devDependencies":{"tape":"git+https://github.com/kgryte/tape.git#fix/globby","tap-min":"git+https://github.com/Planeshifter/tap-min.git","istanbul":"^0.4.1","proxyquire":"^2.0.0","@stdlib/bench":"^0.1.0","@stdlib/symbol-iterator":"^0.1.0","@stdlib/assert-is-boolean":"^0.1.0","@stdlib/random-base-randi":"^0.0.7","@stdlib/random-base-randu":"^0.0.8","@stdlib/assert-is-function":"^0.1.0","@stdlib/assert-has-property":"^0.1.0","@stdlib/assert-is-arraybuffer":"^0.1.0","@stdlib/assert-is-uint32array":"^0.1.0","@stdlib/math-base-special-pow":"^0.0.7","@stdlib/math-base-special-round":"^0.1.0","@stdlib/assert-is-nonnegative-integer":"^0.0.7"},"_npmOperationalInternal":{"tmp":"tmp/array-uint32_0.1.0_1695434663092_0.7308188179216428","host":"s3://npm-registry-packages"}},"0.1.1":{"name":"@stdlib/array-uint32","version":"0.1.1","keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"author":{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"},"license":"Apache-2.0","_id":"@stdlib/array-uint32@0.1.1","maintainers":[{"name":"stdlib-bot","email":"kgryte+stdlibbot@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"contributors":[{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"}],"homepage":"https://stdlib.io","bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"os":["aix","darwin","freebsd","linux","macos","openbsd","sunos","win32","windows"],"dist":{"shasum":"9895f985b20901989c36bf8580c2dcf8ba2911e8","tarball":"https://registry.npmjs.org/@stdlib/array-uint32/-/array-uint32-0.1.1.tgz","fileCount":12,"integrity":"sha512-ZeKTOFvmYsprvNVnAoECPhEvCa3eNm8291MCgLlhYmW47ghOXA32nbU8gN3FONpKd1cUEx6ITfgfktjeiVALhA==","signatures":[{"sig":"MEQCIFYc46NStGwBfhzG8pl30w4R9V1K94j+g3znQ1Jib8ncAiAq3necsV54Me6WW+sc0C+JAbmglc4VneChPeuaK9Tewg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":58694},"main":"./lib","types":"./docs/types","engines":{"npm":">2.7.0","node":">=0.10.0"},"funding":{"url":"https://opencollective.com/stdlib","type":"opencollective"},"gitHead":"b75bcc2e8807ea3f2ec8d8803bb6f4106bd11d0f","scripts":{"test":"make test","examples":"make examples","test-cov":"make test-cov","benchmark":"make benchmark"},"_npmUser":{"name":"stdlib-bot","email":"kgryte+stdlibbot@gmail.com"},"repository":{"url":"git://github.com/stdlib-js/array-uint32.git","type":"git"},"_npmVersion":"8.19.4","description":"Uint32Array.","directories":{"doc":"./docs","lib":"./lib","test":"./test","example":"./examples","benchmark":"./benchmark"},"_nodeVersion":"16.20.2","dependencies":{"@stdlib/assert-has-uint32array-support":"^0.1.1"},"_hasShrinkwrap":false,"devDependencies":{"tape":"git+https://github.com/kgryte/tape.git#fix/globby","tap-min":"git+https://github.com/Planeshifter/tap-min.git","istanbul":"^0.4.1","proxyquire":"^2.0.0","@stdlib/bench":"^0.1.0","@stdlib/symbol-iterator":"^0.1.1","@stdlib/assert-is-boolean":"^0.1.1","@stdlib/random-base-randi":"^0.1.0","@stdlib/random-base-randu":"^0.1.0","@stdlib/assert-is-function":"^0.1.1","@stdlib/assert-has-property":"^0.1.1","@stdlib/assert-is-arraybuffer":"^0.1.1","@stdlib/assert-is-uint32array":"^0.1.1","@stdlib/math-base-special-pow":"^0.1.0","@stdlib/math-base-special-round":"^0.1.1","@stdlib/assert-is-nonnegative-integer":"^0.1.0"},"_npmOperationalInternal":{"tmp":"tmp/array-uint32_0.1.1_1696882122893_0.9608099508714474","host":"s3://npm-registry-packages"}},"0.2.0":{"name":"@stdlib/array-uint32","version":"0.2.0","keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"author":{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"},"license":"Apache-2.0","_id":"@stdlib/array-uint32@0.2.0","maintainers":[{"name":"stdlib-bot","email":"kgryte+stdlibbot@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"contributors":[{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"}],"homepage":"https://stdlib.io","bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"os":["aix","darwin","freebsd","linux","macos","openbsd","sunos","win32","windows"],"dist":{"shasum":"1b5a597733a4fb500b04d907231271405754d26a","tarball":"https://registry.npmjs.org/@stdlib/array-uint32/-/array-uint32-0.2.0.tgz","fileCount":12,"integrity":"sha512-nR0b99uQuVA6o6hNbtdXVJZKKFff9o6vhkr17nBt3wtdwyJGYEGH0nU1znloUw0OXG1LEIfQsI4OwBJ5JP55ow==","signatures":[{"sig":"MEUCIQCFUidqmXpUgV7F97NXlU3KC7PMfJOaR8BJnyuQRc/rmwIgRwSMb6mrmxXU03uiaAvGH8Om5ebkPTxjFiZteGYknao=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":58545},"main":"./lib","types":"./docs/types","engines":{"npm":">2.7.0","node":">=0.10.0"},"funding":{"url":"https://opencollective.com/stdlib","type":"opencollective"},"gitHead":"7137673f0798ef13d7c9fd7becf78e557b1d583b","scripts":{"test":"make test","examples":"make examples","test-cov":"make test-cov","benchmark":"make benchmark"},"_npmUser":{"name":"stdlib-bot","email":"kgryte+stdlibbot@gmail.com"},"repository":{"url":"git://github.com/stdlib-js/array-uint32.git","type":"git"},"_npmVersion":"8.19.4","description":"Uint32Array.","directories":{"doc":"./docs","lib":"./lib","test":"./test","example":"./examples","benchmark":"./benchmark"},"_nodeVersion":"16.20.2","dependencies":{"@stdlib/assert-has-uint32array-support":"^0.2.0"},"_hasShrinkwrap":false,"devDependencies":{"tape":"git+https://github.com/kgryte/tape.git#fix/globby","tap-min":"git+https://github.com/Planeshifter/tap-min.git","istanbul":"^0.4.1","proxyquire":"^2.0.0","@stdlib/bench":"^0.3.1","@stdlib/bench-harness":"^0.1.2","@stdlib/symbol-iterator":"^0.2.0","@stdlib/assert-is-boolean":"^0.1.1","@stdlib/random-base-randi":"^0.1.0","@stdlib/random-base-randu":"^0.1.0","@stdlib/assert-is-function":"^0.1.1","@stdlib/assert-has-property":"^0.2.0","@stdlib/assert-is-arraybuffer":"^0.2.0","@stdlib/assert-is-uint32array":"^0.2.0","@stdlib/math-base-special-pow":"^0.1.0","@stdlib/math-base-special-round":"^0.1.1","@stdlib/assert-is-nonnegative-integer":"^0.1.0"},"_npmOperationalInternal":{"tmp":"tmp/array-uint32_0.2.0_1707888720478_0.9968872218157245","host":"s3://npm-registry-packages"}},"0.2.1":{"name":"@stdlib/array-uint32","version":"0.2.1","keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"author":{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"},"license":"Apache-2.0","_id":"@stdlib/array-uint32@0.2.1","maintainers":[{"name":"stdlib-bot","email":"kgryte+stdlibbot@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"contributors":[{"url":"https://github.com/stdlib-js/stdlib/graphs/contributors","name":"The Stdlib Authors"}],"homepage":"https://stdlib.io","bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"os":["aix","darwin","freebsd","linux","macos","openbsd","sunos","win32","windows"],"dist":{"shasum":"3fd8bdb9d15fd25b0a0d118083fa4455bbf749ff","tarball":"https://registry.npmjs.org/@stdlib/array-uint32/-/array-uint32-0.2.1.tgz","fileCount":12,"integrity":"sha512-nRkvGvMEMd7OUfDWbHhUstqkoWaln08ufUkgDXVDbKyF03HpbCHMM4xGfiKDfaW7h3T2AYLE8YzyKylmAj5jLA==","signatures":[{"sig":"MEYCIQCr2FwVYLM8SfGHCoM5P4EzQm2tKdK8Ov39FZWgsnNHXgIhAOaVWWjbEIzUsQ545CbZC0wc+j4muJfBoKLEiqw/Ia8w","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":57595},"main":"./lib","types":"./docs/types","engines":{"npm":">2.7.0","node":">=0.10.0"},"funding":{"url":"https://opencollective.com/stdlib","type":"opencollective"},"gitHead":"39b81766b9d8a5e89ba4a26e5ea07f6413b46973","scripts":{},"_npmUser":{"name":"stdlib-bot","email":"kgryte+stdlibbot@gmail.com"},"repository":{"url":"git://github.com/stdlib-js/array-uint32.git","type":"git"},"_npmVersion":"8.19.4","description":"Uint32Array.","directories":{"doc":"./docs","lib":"./lib","dist":"./dist"},"_nodeVersion":"16.20.2","dependencies":{"@stdlib/assert-has-uint32array-support":"^0.2.1"},"_hasShrinkwrap":false,"devDependencies":{},"_npmOperationalInternal":{"tmp":"tmp/array-uint32_0.2.1_1708636414411_0.8148395848754812","host":"s3://npm-registry-packages"}},"0.2.2":{"name":"@stdlib/array-uint32","version":"0.2.2","description":"Uint32Array.","license":"Apache-2.0","author":{"name":"The Stdlib Authors","url":"https://github.com/stdlib-js/stdlib/graphs/contributors"},"contributors":[{"name":"The Stdlib Authors","url":"https://github.com/stdlib-js/stdlib/graphs/contributors"}],"main":"./lib","directories":{"doc":"./docs","lib":"./lib","dist":"./dist"},"types":"./docs/types","scripts":{},"homepage":"https://stdlib.io","repository":{"type":"git","url":"git://github.com/stdlib-js/array-uint32.git"},"bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"dependencies":{"@stdlib/assert-has-uint32array-support":"^0.2.2"},"devDependencies":{},"engines":{"node":">=0.10.0","npm":">2.7.0"},"os":["aix","darwin","freebsd","linux","macos","openbsd","sunos","win32","windows"],"keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"funding":{"type":"opencollective","url":"https://opencollective.com/stdlib"},"gitHead":"7ee91a531462ec823da632c6ae8ff65a8d16549e","_id":"@stdlib/array-uint32@0.2.2","_nodeVersion":"16.20.2","_npmVersion":"8.19.4","dist":{"integrity":"sha512-3T894I9C2MqZJJmRCYFTuJp4Qw9RAt+GzYnVPyIXoK1h3TepUXe9VIVx50cUFIibdXycgu0IFGASeAb3YMyupw==","shasum":"0e772f971706e7060fa1878f81b0fe05b86c8f07","tarball":"https://registry.npmjs.org/@stdlib/array-uint32/-/array-uint32-0.2.2.tgz","fileCount":12,"unpackedSize":57595,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDCwQc1gxrgb0tZsomPkZhBYFMb+Kgt8DCeORR8DIb+NAIgGAkdfCHZxp8vIYw89NS1ONVAUHQ5S4hks/aDMtey/Ik="}]},"_npmUser":{"name":"stdlib-bot","email":"kgryte+stdlibbot@gmail.com"},"maintainers":[{"name":"stdlib-bot","email":"kgryte+stdlibbot@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/array-uint32_0.2.2_1722089132314_0.13242139538738074"},"_hasShrinkwrap":false}},"time":{"created":"2021-06-15T15:59:51.546Z","modified":"2024-07-27T14:05:32.735Z","0.0.1":"2021-06-15T15:59:51.895Z","0.0.2":"2021-06-16T05:05:10.470Z","0.0.3":"2021-06-27T23:26:13.833Z","0.0.4":"2021-07-07T01:01:43.821Z","0.0.5":"2021-08-22T20:18:01.788Z","0.0.6":"2022-02-16T19:26:42.122Z","0.1.0":"2023-09-23T02:04:23.460Z","0.1.1":"2023-10-09T20:08:43.165Z","0.2.0":"2024-02-14T05:32:00.674Z","0.2.1":"2024-02-22T21:13:34.592Z","0.2.2":"2024-07-27T14:05:32.485Z"},"bugs":{"url":"https://github.com/stdlib-js/stdlib/issues"},"author":{"name":"The Stdlib Authors","url":"https://github.com/stdlib-js/stdlib/graphs/contributors"},"license":"Apache-2.0","homepage":"https://stdlib.io","keywords":["stdlib","stdtypes","types","data","structure","array","typed","typed array","typed-array","uint32array","uint32","uint32_t","integer","int","uint","unsigned","long"],"repository":{"type":"git","url":"git://github.com/stdlib-js/array-uint32.git"},"description":"Uint32Array.","contributors":[{"name":"The Stdlib Authors","url":"https://github.com/stdlib-js/stdlib/graphs/contributors"}],"maintainers":[{"name":"stdlib-bot","email":"kgryte+stdlibbot@gmail.com"},{"name":"kgryte","email":"kgryte@gmail.com"},{"name":"planeshifter","email":"pgb@andrew.cmu.edu"},{"name":"rreusser","email":"rsreusser@gmail.com"}],"readme":"<!--\n\n@license Apache-2.0\n\nCopyright (c) 2018 The Stdlib Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n-->\n\n\n<details>\n  <summary>\n    About stdlib...\n  </summary>\n  <p>We believe in a future in which the web is a preferred environment for numerical computation. To help realize this future, we've built stdlib. stdlib is a standard library, with an emphasis on numerical and scientific computation, written in JavaScript (and C) for execution in browsers and in Node.js.</p>\n  <p>The library is fully decomposable, being architected in such a way that you can swap out and mix and match APIs and functionality to cater to your exact preferences and use cases.</p>\n  <p>When you use stdlib, you can be absolutely certain that you are using the most thorough, rigorous, well-written, studied, documented, tested, measured, and high-quality code out there.</p>\n  <p>To join us in bringing numerical computing to the web, get started by checking us out on <a href=\"https://github.com/stdlib-js/stdlib\">GitHub</a>, and please consider <a href=\"https://opencollective.com/stdlib\">financially supporting stdlib</a>. We greatly appreciate your continued support!</p>\n</details>\n\n# Uint32Array\n\n[![NPM version][npm-image]][npm-url] [![Build Status][test-image]][test-url] [![Coverage Status][coverage-image]][coverage-url] <!-- [![dependencies][dependencies-image]][dependencies-url] -->\n\n> [Typed array][mdn-typed-array] constructor which returns a [typed array][mdn-typed-array] representing an array of 32-bit unsigned integers in the platform byte order.\n\n<!-- Section to include introductory text. Make sure to keep an empty line after the intro `section` element and another before the `/section` close. -->\n\n<section class=\"intro\">\n\n</section>\n\n<!-- /.intro -->\n\n<!-- Package usage documentation. -->\n\n<section class=\"installation\">\n\n## Installation\n\n```bash\nnpm install @stdlib/array-uint32\n```\n\n</section>\n\n<section class=\"usage\">\n\n## Usage\n\n```javascript\nvar Uint32Array = require( '@stdlib/array-uint32' );\n```\n\n#### Uint32Array()\n\nA [typed array][mdn-typed-array] constructor which returns a [typed array][mdn-typed-array] representing an array of 32-bit unsigned integers in the platform byte order.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array();\n// returns <Uint32Array>\n```\n\n#### Uint32Array( length )\n\nReturns a [typed array][mdn-typed-array] having a specified length.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( 5 );\n// returns <Uint32Array>[ 0, 0, 0, 0, 0 ]\n```\n\n#### Uint32Array( typedarray )\n\nCreates a [typed array][mdn-typed-array] from another [typed array][mdn-typed-array].\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar Float32Array = require( '@stdlib/array-float32' );\n\nvar arr1 = new Float32Array( [ 5.0, 5.0, 5.0 ] );\nvar arr2 = new Uint32Array( arr1 );\n// returns <Uint32Array>[ 5, 5, 5 ]\n```\n\n#### Uint32Array( obj )\n\nCreates a [typed array][mdn-typed-array] from an array-like `object` or iterable.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 5.0, 5.0, 5.0 ] );\n// returns <Uint32Array>[ 5, 5, 5 ]\n```\n\n#### Uint32Array( buffer\\[, byteOffset\\[, length]] )\n\nReturns a [typed array][mdn-typed-array] view of an [`ArrayBuffer`][@stdlib/array/buffer].\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar ArrayBuffer = require( '@stdlib/array-buffer' );\n\nvar buf = new ArrayBuffer( 16 );\nvar arr = new Uint32Array( buf, 0, 4 );\n// returns <Uint32Array>[ 0, 0, 0, 0 ]\n```\n\n* * *\n\n### Properties\n\n<a name=\"static-prop-bytes-per-element\"></a>\n\n#### Uint32Array.BYTES_PER_ELEMENT\n\nNumber of bytes per view element.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar nbytes = Uint32Array.BYTES_PER_ELEMENT;\n// returns 4\n```\n\n<a name=\"static-prop-name\"></a>\n\n#### Uint32Array.name\n\n[Typed array][mdn-typed-array] constructor name.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar str = Uint32Array.name;\n// returns 'Uint32Array'\n```\n\n<a name=\"prop-buffer\"></a>\n\n#### Uint32Array.prototype.buffer\n\n**Read-only** property which returns the [`ArrayBuffer`][@stdlib/array/buffer] referenced by the [typed array][mdn-typed-array].\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( 5 );\nvar buf = arr.buffer;\n// returns <ArrayBuffer>\n```\n\n<a name=\"prop-byte-length\"></a>\n\n#### Uint32Array.prototype.byteLength\n\n**Read-only** property which returns the length (in bytes) of the [typed array][mdn-typed-array].\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( 5 );\nvar byteLength = arr.byteLength;\n// returns 20\n```\n\n<a name=\"prop-byte-offset\"></a>\n\n#### Uint32Array.prototype.byteOffset\n\n**Read-only** property which returns the offset (in bytes) of the [typed array][mdn-typed-array] from the start of its [`ArrayBuffer`][@stdlib/array/buffer].\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( 5 );\nvar byteOffset = arr.byteOffset;\n// returns 0\n```\n\n<a name=\"prop-bytes-per-element\"></a>\n\n#### Uint32Array.prototype.BYTES_PER_ELEMENT\n\nNumber of bytes per view element.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( 5 );\nvar nbytes = arr.BYTES_PER_ELEMENT;\n// returns 4\n```\n\n<a name=\"prop-length\"></a>\n\n#### Uint32Array.prototype.length\n\n**Read-only** property which returns the number of view elements.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( 5 );\nvar len = arr.length;\n// returns 5\n```\n\n* * *\n\n### Methods\n\n<a name=\"static-method-from\"></a>\n\n#### Uint32Array.from( src\\[, map\\[, thisArg]] )\n\nCreates a new typed array from an array-like `object` or an iterable.\n\n```javascript\nvar arr = Uint32Array.from( [ 1, 2 ] );\n// returns <Uint32Array>[ 1, 2 ]\n```\n\nTo invoke a function for each `src` value, provide a callback function.\n\n```javascript\nfunction mapFcn( v ) {\n    return v * 2;\n}\n\nvar arr = Uint32Array.from( [ 1, 2 ], mapFcn );\n// returns <Uint32Array>[ 2, 4 ]\n```\n\nA callback function is provided two arguments:\n\n-   `value`: source value\n-   `index`: source index\n\nTo set the callback execution context, provide a `thisArg`.\n\n```javascript\nfunction mapFcn( v ) {\n    this.count += 1;\n    return v * 2;\n}\n\nvar ctx = {\n    'count': 0\n};\n\nvar arr = Uint32Array.from( [ 1, 2 ], mapFcn, ctx );\n// returns <Uint32Array>[ 2, 4 ]\n\nvar n = ctx.count;\n// returns 2\n```\n\n<a name=\"static-method-of\"></a>\n\n#### Uint32Array.of( element0\\[, element1\\[, ...elementN]] )\n\nCreates a new typed array from a variable number of arguments.\n\n```javascript\nvar arr = Uint32Array.of( 1, 2 );\n// returns <Uint32Array>[ 1, 2 ]\n```\n\n<a name=\"method-copy-within\"></a>\n\n#### Uint32Array.prototype.copyWithin( target, start\\[, end] )\n\nCopies a sequence of elements within an array starting at `start` and ending at `end` (non-inclusive) to the position starting at `target`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3, 4, 5 ] );\n\n// Copy the last two elements to the first two elements:\narr.copyWithin( 0, 3 );\n\nvar v = arr[ 0 ];\n// returns 4\n\nv = arr[ 1 ];\n// returns 5\n```\n\nBy default, `end` equals the number of array elements (i.e., one more than the last array index). To limit the sequence length, provide an `end` argument.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3, 4, 5 ] );\n\n// Copy the first two elements to the last two elements:\narr.copyWithin( 3, 0, 2 );\n\nvar v = arr[ 3 ];\n// returns 1\n\nv = arr[ 4 ];\n// returns 2\n```\n\nWhen a `target`, `start`, and/or `end` index is negative, the respective index is determined relative to the last array element. The following example achieves the same behavior as the previous example:\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3, 4, 5 ] );\n\n// Copy the first two elements to the last two elements:\narr.copyWithin( -2, -5, -3 );\n\nvar v = arr[ 3 ];\n// returns 1\n\nv = arr[ 4 ];\n// returns 2\n```\n\n<a name=\"method-entries\"></a>\n\n#### Uint32Array.prototype.entries()\n\nReturns an iterator for iterating over array key-value pairs.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2 ] );\n\n// Create an iterator:\nvar it = arr.entries();\n\n// Iterate over key-value pairs...\nvar v = it.next().value;\n// returns [ 0, 1 ]\n\nv = it.next().value;\n// returns [ 1, 2 ]\n\nvar bool = it.next().done;\n// returns true\n```\n\n<a name=\"method-every\"></a>\n\n#### Uint32Array.prototype.every( predicate\\[, thisArg] )\n\nTests whether all array elements pass a test implemented by a `predicate` function.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    return ( v <= 1 );\n}\n\nvar arr = new Uint32Array( [ 1, 2 ] );\n\nvar bool = arr.every( predicate );\n// returns false\n```\n\nA `predicate` function is provided three arguments:\n\n-   `value`: array element\n-   `index`: array index\n-   `arr`: array on which the method is invoked\n\nTo set the callback execution context, provide a `thisArg`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    this.count += 1;\n    return ( v >= 1 );\n}\n\nvar ctx = {\n    'count': 0\n};\n\nvar arr = new Uint32Array( [ 1, 2 ] );\n\nvar bool = arr.every( predicate, ctx );\n// returns true\n\nvar n = ctx.count;\n// returns 2\n```\n\n<a name=\"method-fill\"></a>\n\n#### Uint32Array.prototype.fill( value\\[, start\\[, end]] )\n\nFills an array from a `start` index to an `end` index (non-inclusive) with a provided `value`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( 2 );\n\n// Set all array elements to the same value:\narr.fill( 2 );\n\nvar v = arr[ 0 ];\n// returns 2\n\nv = arr[ 1 ];\n// returns 2\n\n// Set all array elements starting from the first index to the same value:\narr.fill( 3, 1 );\n\nv = arr[ 0 ];\n// returns 2\n\nv = arr[ 1 ];\n// returns 3\n\n// Set all array elements, except the last element, to the same value:\narr.fill( 4, 0, arr.length-1 );\n\nv = arr[ 0 ];\n// returns 4\n\nv = arr[ 1 ];\n// returns 3\n```\n\nWhen a `start` and/or `end` index is negative, the respective index is determined relative to the last array element.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( 2 );\n\n// Set all array elements, except the last element, to the same value:\narr.fill( 2, -arr.length, -1 );\n\nvar v = arr[ 0 ];\n// returns 2\n\nv = arr[ 1 ];\n// returns 0\n```\n\n<a name=\"method-filter\"></a>\n\n#### Uint32Array.prototype.filter( predicate\\[, thisArg] )\n\nCreates a new array (of the same data type as the host array) which includes those elements for which a `predicate` function returns a truthy value.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    return ( v >= 2 );\n}\n\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.filter( predicate );\n// returns <Uint32Array>[ 2, 3 ]\n```\n\nIf a `predicate` function does not return a truthy value for any array element, the method returns an empty array.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    return ( v >= 10 );\n}\n\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.filter( predicate );\n// returns <Uint32Array>[]\n```\n\nA `predicate` function is provided three arguments:\n\n-   `value`: array element\n-   `index`: array index\n-   `arr`: array on which the method is invoked\n\nTo set the callback execution context, provide a `thisArg`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    this.count += 1;\n    return ( v >= 2 );\n}\n\nvar ctx = {\n    'count': 0\n};\n\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.filter( predicate, ctx );\n\nvar n = ctx.count;\n// returns 3\n```\n\n<a name=\"method-find\"></a>\n\n#### Uint32Array.prototype.find( predicate\\[, thisArg] )\n\nReturns the first array element for which a provided `predicate` function returns a truthy value.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    return ( v > 2 );\n}\n\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar v = arr.find( predicate );\n// returns 3\n```\n\nIf a `predicate` function does not return a truthy value for any array element, the method returns `undefined`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    return ( v < 1 );\n}\n\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar v = arr.find( predicate );\n// returns undefined\n```\n\nA `predicate` function is provided three arguments:\n\n-   `value`: array element\n-   `index`: array index\n-   `arr`: array on which the method is invoked\n\nTo set the callback execution context, provide a `thisArg`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    this.count += 1;\n    return ( v > 2 );\n}\n\nvar ctx = {\n    'count': 0\n};\n\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar v = arr.find( predicate, ctx );\n// returns 3\n\nvar n = ctx.count;\n// returns 3\n```\n\n<a name=\"method-find-index\"></a>\n\n#### Uint32Array.prototype.findIndex( predicate\\[, thisArg] )\n\nReturns the index of the first array element for which a provided `predicate` function returns a truthy value.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    return ( v >= 3 );\n}\n\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar idx = arr.findIndex( predicate );\n// returns 2\n```\n\nIf a `predicate` function does not return a truthy value for any array element, the method returns `-1`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    return ( v < 1 );\n}\n\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar idx = arr.findIndex( predicate );\n// returns -1\n```\n\nA `predicate` function is provided three arguments:\n\n-   `value`: array element\n-   `index`: array index\n-   `arr`: array on which the method is invoked\n\nTo set the callback execution context, provide a `thisArg`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    this.count += 1;\n    return ( v >= 3 );\n}\n\nvar ctx = {\n    'count': 0\n};\n\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar idx = arr.findIndex( predicate, ctx );\n// returns 2\n\nvar n = ctx.count;\n// returns 3\n```\n\n<a name=\"method-for-each\"></a>\n\n#### Uint32Array.prototype.forEach( fcn\\[, thisArg] )\n\nInvokes a callback for each array element.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar str = '';\n\nfunction fcn( v, i ) {\n    str += i + ':' + v;\n    if ( i < arr.length-1 ) {\n        str += ' ';\n    }\n}\n\narr.forEach( fcn );\n\nconsole.log( str );\n// => '0:1 1:2 2:3'\n```\n\nThe callback is provided three arguments:\n\n-   `value`: array element\n-   `index`: array index\n-   `arr`: array on which the method is invoked\n\nTo set the callback execution context, provide a `thisArg`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction fcn() {\n    this.count += 1;\n}\n\nvar ctx = {\n    'count': 0\n};\n\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\narr.forEach( fcn, ctx );\n\nvar n = ctx.count;\n// returns 3\n```\n\n<a name=\"method-includes\"></a>\n\n#### Uint32Array.prototype.includes( searchElement\\[, fromIndex] )\n\nReturns a `boolean` indicating whether an array includes a search element.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar bool = arr.includes( 3 );\n// returns true\n\nbool = arr.includes( 0 );\n// returns false\n```\n\nBy default, the method searches the entire array (`fromIndex = 0`). To begin searching from a specific array index, provide a `fromIndex`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar bool = arr.includes( 1, 1 );\n// returns false\n```\n\nWhen a `fromIndex` is negative, the starting index is resolved relative to the last array element.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar bool = arr.includes( 1, -2 );\n// returns false\n```\n\n<a name=\"method-index-of\"></a>\n\n#### Uint32Array.prototype.indexOf( searchElement\\[, fromIndex] )\n\nReturns the index of the first array element strictly equal to a search element.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar idx = arr.indexOf( 3 );\n// returns 2\n\nidx = arr.indexOf( 0 );\n// returns -1\n```\n\nBy default, the method searches the entire array (`fromIndex = 0`). To begin searching from a specific array index, provide a `fromIndex`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar idx = arr.indexOf( 1, 1 );\n// returns -1\n```\n\nWhen a `fromIndex` is negative, the starting index is resolved relative to the last array element.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar idx = arr.indexOf( 1, -2 );\n// returns -1\n```\n\n<a name=\"method-join\"></a>\n\n#### Uint32Array.prototype.join( \\[separator] )\n\nSerializes an array by joining all array elements as a string.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar str = arr.join();\n// returns '1,2,3'\n```\n\nBy default, the method delineates array elements using a comma `,`. To specify a custom separator, provide a `separator` string.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar str = arr.join( '|' );\n// returns '1|2|3'\n```\n\n<a name=\"method-keys\"></a>\n\n#### Uint32Array.prototype.keys()\n\nReturns an iterator for iterating over array keys.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2 ] );\n\n// Create an iterator:\nvar it = arr.keys();\n\n// Iterate over keys...\nvar v = it.next().value;\n// returns 0\n\nv = it.next().value;\n// returns 1\n\nvar bool = it.next().done;\n// returns true\n```\n\n<a name=\"method-last-index-of\"></a>\n\n#### Uint32Array.prototype.lastIndexOf( searchElement\\[, fromIndex] )\n\nReturns the index of the last array element strictly equal to a search element, iterating from right to left.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 0, 2, 0, 1 ] );\n\nvar idx = arr.lastIndexOf( 0 );\n// returns 3\n\nidx = arr.lastIndexOf( 3 );\n// returns -1\n```\n\nBy default, the method searches the entire array (`fromIndex = -1`). To begin searching from a specific array index, provide a `fromIndex`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 0, 2, 0, 1 ] );\n\nvar idx = arr.lastIndexOf( 0, 2 );\n// returns 1\n```\n\nWhen a `fromIndex` is negative, the starting index is resolved relative to the last array element.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 0, 2, 0, 1 ] );\n\nvar idx = arr.lastIndexOf( 0, -3 );\n// returns 1\n```\n\n<a name=\"method-map\"></a>\n\n#### Uint32Array.prototype.map( fcn\\[, thisArg] )\n\nMaps each array element to an element in a new array having the same data type as the host array.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction fcn( v ) {\n    return v * 2;\n}\n\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.map( fcn );\n// returns <Uint32Array>[ 2, 4, 6 ]\n```\n\nA callback is provided three arguments:\n\n-   `value`: array element\n-   `index`: array index\n-   `arr`: array on which the method is invoked\n\nTo set the callback execution context, provide a `thisArg`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction fcn( v ) {\n    this.count += 1;\n    return v * 2;\n}\n\nvar ctx = {\n    'count': 0\n};\n\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.map( fcn, ctx );\n\nvar n = ctx.count;\n// returns 3\n```\n\n<a name=\"method-reduce\"></a>\n\n#### Uint32Array.prototype.reduce( fcn\\[, initialValue] )\n\nApplies a function against an accumulator and each element in an array and returns the accumulated result.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction fcn( acc, v ) {\n    return acc + ( v*v );\n}\n\nvar arr = new Uint32Array( [ 2, 1, 3 ] );\n\nvar v = arr.reduce( fcn );\n// returns 12\n```\n\nIf not provided an initial value, the method invokes a provided function with the first array element as the first argument and the second array element as the second argument.\n\nIf provided an initial value, the method invokes a provided function with the initial value as the first argument and the first array element as the second argument.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction fcn( acc, v ) {\n    return acc + ( v*v );\n}\n\nvar arr = new Uint32Array( [ 2, 1, 3 ] );\n\nvar v = arr.reduce( fcn, 0 );\n// returns 14\n```\n\nA callback is provided four arguments:\n\n-   `acc`: accumulated result\n-   `value`: array element\n-   `index`: array index\n-   `arr`: array on which the method is invoked\n\n<a name=\"method-reduce-right\"></a>\n\n#### Uint32Array.prototype.reduceRight( fcn\\[, initialValue] )\n\nApplies a function against an accumulator and each element in an array and returns the accumulated result, iterating from right to left.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction fcn( acc, v ) {\n    return acc + ( v*v );\n}\n\nvar arr = new Uint32Array( [ 2, 1, 3 ] );\n\nvar v = arr.reduceRight( fcn );\n// returns 8\n```\n\nIf not provided an initial value, the method invokes a provided function with the last array element as the first argument and the second-to-last array element as the second argument.\n\nIf provided an initial value, the method invokes a provided function with the initial value as the first argument and the last array element as the second argument.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction fcn( acc, v ) {\n    return acc + ( v*v );\n}\n\nvar arr = new Uint32Array( [ 2, 1, 3 ] );\n\nvar v = arr.reduce( fcn, 0 );\n// returns 14\n```\n\nA callback is provided four arguments:\n\n-   `acc`: accumulated result\n-   `value`: array element\n-   `index`: array index\n-   `arr`: array on which the method is invoked\n\n<a name=\"method-reverse\"></a>\n\n#### Uint32Array.prototype.reverse()\n\nReverses an array **in-place** (thus mutating the array on which the method is invoked).\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 2, 0, 3 ] );\n\n// Reverse the array:\narr.reverse();\n\nvar v = arr[ 0 ];\n// returns 3\n\nv = arr[ 1 ];\n// returns 0\n\nv = arr[ 2 ];\n// returns 2\n```\n\n<a name=\"method-set\"></a>\n\n#### Uint32Array.prototype.set( arr\\[, offset] )\n\nSets array elements.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n// returns <Uint32Array>[ 1, 2, 3 ]\n\n// Set the first two array elements:\narr.set( [ 4, 5 ] );\n\nvar v = arr[ 0 ];\n// returns 4\n\nv = arr[ 1 ];\n// returns 5\n```\n\nBy default, the method starts writing values at the first array index. To specify an alternative index, provide an index `offset`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n// returns <Uint32Array>[ 1, 2, 3 ]\n\n// Set the last two array elements:\narr.set( [ 4, 5 ], 1 );\n\nvar v = arr[ 1 ];\n// returns 4\n\nv = arr[ 2 ];\n// returns 5\n```\n\n<a name=\"method-slice\"></a>\n\n#### Uint32Array.prototype.slice( \\[begin\\[, end]] )\n\nCopies array elements to a new array with the same underlying data type as the host array.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.slice();\n\nvar bool = ( arr1 === arr2 );\n// returns false\n\nbool = ( arr1.buffer === arr2.buffer );\n// returns false\n\nvar v = arr2[ 0 ];\n// returns 1\n\nv = arr2[ 1 ];\n// returns 2\n\nv = arr2[ 2 ];\n// returns 3\n```\n\nBy default, the method copies elements beginning with the first array element. To specify an alternative array index at which to begin copying, provide a `begin` index (inclusive).\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.slice( 1 );\n\nvar len = arr2.length;\n// returns 2\n\nvar v = arr2[ 0 ];\n// returns 2\n\nv = arr2[ 1 ];\n// returns 3\n```\n\nBy default, the method copies all array elements after `begin`. To specify an alternative array index at which to end copying, provide an `end` index (exclusive).\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.slice( 0, 2 );\n\nvar len = arr2.length;\n// returns 2\n\nvar v = arr2[ 0 ];\n// returns 1\n\nv = arr2[ 1 ];\n// returns 2\n```\n\nWhen a `begin` and/or `end` index is negative, the respective index is determined relative to the last array element.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.slice( -arr1.length, -1 );\n\nvar len = arr2.length;\n// returns 2\n\nvar v = arr2[ 0 ];\n// returns 1\n\nv = arr2[ 1 ];\n// returns 2\n```\n\n<a name=\"method-some\"></a>\n\n#### Uint32Array.prototype.some( predicate\\[, thisArg] )\n\nTests whether at least one array element passes a test implemented by a `predicate` function.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    return ( v >= 2 );\n}\n\nvar arr = new Uint32Array( [ 1, 2 ] );\n\nvar bool = arr.some( predicate );\n// returns true\n```\n\nA `predicate` function is provided three arguments:\n\n-   `value`: array element\n-   `index`: array index\n-   `arr`: array on which the method is invoked\n\nTo set the callback execution context, provide a `thisArg`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction predicate( v ) {\n    this.count += 1;\n    return ( v >= 2 );\n}\n\nvar ctx = {\n    'count': 0\n};\n\nvar arr = new Uint32Array( [ 1, 1 ] );\n\nvar bool = arr.some( predicate, ctx );\n// returns false\n\nvar n = ctx.count;\n// returns 2\n```\n\n<a name=\"method-sort\"></a>\n\n#### Uint32Array.prototype.sort( \\[compareFunction] )\n\nSorts an array **in-place** (thus mutating the array on which the method is invoked).\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 2, 3, 0 ] );\n\n// Sort the array (in ascending order):\narr.sort();\n\nvar v = arr[ 0 ];\n// returns 0\n\nv = arr[ 1 ];\n// returns 2\n\nv = arr[ 2 ];\n// returns 3\n```\n\nBy default, the method sorts array elements in ascending order. To impose a custom order, provide a `compareFunction`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nfunction descending( a, b ) {\n    return b - a;\n}\n\nvar arr = new Uint32Array( [ 2, 3, 0 ] );\n\n// Sort the array (in descending order):\narr.sort( descending );\n\nvar v = arr[ 0 ];\n// returns 3\n\nv = arr[ 1 ];\n// returns 2\n\nv = arr[ 2 ];\n// returns 0\n```\n\nThe comparison function is provided two array elements, `a` and `b`, per invocation, and its return value determines the sort order as follows:\n\n-   If the comparison function returns a value **less** than zero, then the method sorts `a` to an index lower than `b` (i.e., `a` should come **before** `b`).\n-   If the comparison function returns a value **greater** than zero, then the method sorts `a` to an index higher than `b` (i.e., `b` should come **before** `a`).\n-   If the comparison function returns **zero**, then the relative order of `a` and `b` _should_ remain unchanged.\n\n<a name=\"method-subarray\"></a>\n\n#### Uint32Array.prototype.subarray( \\[begin\\[, end]] )\n\nCreates a new typed array view over the same underlying [`ArrayBuffer`][@stdlib/array/buffer] and with the same underlying data type as the host array.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.subarray();\n// returns <Uint32Array>[ 1, 2, 3 ]\n\nvar bool = ( arr1.buffer === arr2.buffer );\n// returns true\n```\n\nBy default, the method creates a typed array view beginning with the first array element. To specify an alternative array index at which to begin, provide a `begin` index (inclusive).\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.subarray( 1 );\n// returns <Uint32Array>[ 2, 3 ]\n\nvar bool = ( arr1.buffer === arr2.buffer );\n// returns true\n```\n\nBy default, the method creates a typed array view which includes all array elements after `begin`. To limit the number of array elements after `begin`, provide an `end` index (exclusive).\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.subarray( 0, 2 );\n// returns <Uint32Array>[ 1, 2 ]\n\nvar bool = ( arr1.buffer === arr2.buffer );\n// returns true\n```\n\nWhen a `begin` and/or `end` index is negative, the respective index is determined relative to the last array element.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.subarray( -arr1.length, -1 );\n// returns <Uint32Array>[ 1, 2 ]\n\nvar bool = ( arr1.buffer === arr2.buffer );\n// returns true\n```\n\nIf the method is unable to resolve indices to a non-empty array subsequence, the method returns an empty typed array.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr1 = new Uint32Array( [ 1, 2, 3 ] );\n\nvar arr2 = arr1.subarray( 10, -1 );\n// returns <Uint32Array>[]\n```\n\n<a name=\"method-to-locale-string\"></a>\n\n#### Uint32Array.prototype.toLocaleString( \\[locales\\[, options]] )\n\nSerializes an array as a locale-specific `string`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar str = arr.toLocaleString();\n// returns '1,2,3'\n```\n\n<a name=\"method-to-string\"></a>\n\n#### Uint32Array.prototype.toString()\n\nSerializes an array as a `string`.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2, 3 ] );\n\nvar str = arr.toString();\n// returns '1,2,3'\n```\n\n<a name=\"method-values\"></a>\n\n#### Uint32Array.prototype.values()\n\nReturns an iterator for iterating over array elements.\n\n<!-- eslint-disable stdlib/require-globals -->\n\n```javascript\nvar arr = new Uint32Array( [ 1, 2 ] );\n\n// Create an iterator:\nvar it = arr.values();\n\n// Iterate over array elements...\nvar v = it.next().value;\n// returns 1\n\nv = it.next().value;\n// returns 2\n\nvar bool = it.next().done;\n// returns true\n```\n\n</section>\n\n<!-- /.usage -->\n\n* * *\n\n<!-- Package usage notes. Make sure to keep an empty line after the `section` element and another before the `/section` close. -->\n\n<section class=\"notes\">\n\n</section>\n\n<!-- /.notes -->\n\n<!-- Package usage examples. -->\n\n<section class=\"examples\">\n\n## Examples\n\n<!-- eslint no-undef: \"error\" -->\n\n```javascript\nvar randu = require( '@stdlib/random-base-randu' );\nvar round = require( '@stdlib/math-base-special-round' );\nvar ctor = require( '@stdlib/array-uint32' );\n\nvar arr;\nvar i;\n\narr = new ctor( 10 );\nfor ( i = 0; i < arr.length; i++ ) {\n    arr[ i ] = round( randu()*100.0 );\n}\nconsole.log( arr );\n```\n\n</section>\n\n<!-- /.examples -->\n\n<!-- Section to include cited references. If references are included, add a horizontal rule *before* the section. Make sure to keep an empty line after the `section` element and another before the `/section` close. -->\n\n<section class=\"references\">\n\n</section>\n\n<!-- /.references -->\n\n<!-- Section for related `stdlib` packages. Do not manually edit this section, as it is automatically populated. -->\n\n<section class=\"related\">\n\n* * *\n\n## See Also\n\n-   <span class=\"package-name\">[`@stdlib/array-buffer`][@stdlib/array/buffer]</span><span class=\"delimiter\">: </span><span class=\"description\">ArrayBuffer.</span>\n-   <span class=\"package-name\">[`@stdlib/array-float32`][@stdlib/array/float32]</span><span class=\"delimiter\">: </span><span class=\"description\">Float32Array.</span>\n-   <span class=\"package-name\">[`@stdlib/array-float64`][@stdlib/array/float64]</span><span class=\"delimiter\">: </span><span class=\"description\">Float64Array.</span>\n-   <span class=\"package-name\">[`@stdlib/array-int16`][@stdlib/array/int16]</span><span class=\"delimiter\">: </span><span class=\"description\">Int16Array.</span>\n-   <span class=\"package-name\">[`@stdlib/array-int32`][@stdlib/array/int32]</span><span class=\"delimiter\">: </span><span class=\"description\">Int32Array.</span>\n-   <span class=\"package-name\">[`@stdlib/array-int8`][@stdlib/array/int8]</span><span class=\"delimiter\">: </span><span class=\"description\">Int8Array.</span>\n-   <span class=\"package-name\">[`@stdlib/array-uint16`][@stdlib/array/uint16]</span><span class=\"delimiter\">: </span><span class=\"description\">Uint16Array.</span>\n-   <span class=\"package-name\">[`@stdlib/array-uint8`][@stdlib/array/uint8]</span><span class=\"delimiter\">: </span><span class=\"description\">Uint8Array.</span>\n-   <span class=\"package-name\">[`@stdlib/array-uint8c`][@stdlib/array/uint8c]</span><span class=\"delimiter\">: </span><span class=\"description\">Uint8ClampedArray.</span>\n\n</section>\n\n<!-- /.related -->\n\n<!-- Section for all links. Make sure to keep an empty line after the `section` element and another before the `/section` close. -->\n\n\n<section class=\"main-repo\" >\n\n* * *\n\n## Notice\n\nThis package is part of [stdlib][stdlib], a standard library for JavaScript and Node.js, with an emphasis on numerical and scientific computing. The library provides a collection of robust, high performance libraries for mathematics, statistics, streams, utilities, and more.\n\nFor more information on the project, filing bug reports and feature requests, and guidance on how to develop [stdlib][stdlib], see the main project [repository][stdlib].\n\n#### Community\n\n[![Chat][chat-image]][chat-url]\n\n---\n\n## License\n\nSee [LICENSE][stdlib-license].\n\n\n## Copyright\n\nCopyright &copy; 2016-2024. The Stdlib [Authors][stdlib-authors].\n\n</section>\n\n<!-- /.stdlib -->\n\n<!-- Section for all links. Make sure to keep an empty line after the `section` element and another before the `/section` close. -->\n\n<section class=\"links\">\n\n[npm-image]: http://img.shields.io/npm/v/@stdlib/array-uint32.svg\n[npm-url]: https://npmjs.org/package/@stdlib/array-uint32\n\n[test-image]: https://github.com/stdlib-js/array-uint32/actions/workflows/test.yml/badge.svg?branch=v0.2.2\n[test-url]: https://github.com/stdlib-js/array-uint32/actions/workflows/test.yml?query=branch:v0.2.2\n\n[coverage-image]: https://img.shields.io/codecov/c/github/stdlib-js/array-uint32/main.svg\n[coverage-url]: https://codecov.io/github/stdlib-js/array-uint32?branch=main\n\n<!--\n\n[dependencies-image]: https://img.shields.io/david/stdlib-js/array-uint32.svg\n[dependencies-url]: https://david-dm.org/stdlib-js/array-uint32/main\n\n-->\n\n[chat-image]: https://img.shields.io/gitter/room/stdlib-js/stdlib.svg\n[chat-url]: https://app.gitter.im/#/room/#stdlib-js_stdlib:gitter.im\n\n[stdlib]: https://github.com/stdlib-js/stdlib\n\n[stdlib-authors]: https://github.com/stdlib-js/stdlib/graphs/contributors\n\n[umd]: https://github.com/umdjs/umd\n[es-module]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\n\n[deno-url]: https://github.com/stdlib-js/array-uint32/tree/deno\n[deno-readme]: https://github.com/stdlib-js/array-uint32/blob/deno/README.md\n[umd-url]: https://github.com/stdlib-js/array-uint32/tree/umd\n[umd-readme]: https://github.com/stdlib-js/array-uint32/blob/umd/README.md\n[esm-url]: https://github.com/stdlib-js/array-uint32/tree/esm\n[esm-readme]: https://github.com/stdlib-js/array-uint32/blob/esm/README.md\n[branches-url]: https://github.com/stdlib-js/array-uint32/blob/main/branches.md\n\n[stdlib-license]: https://raw.githubusercontent.com/stdlib-js/array-uint32/main/LICENSE\n\n[mdn-typed-array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n<!-- <related-links> -->\n\n[@stdlib/array/buffer]: https://www.npmjs.com/package/@stdlib/array-buffer\n\n[@stdlib/array/float32]: https://www.npmjs.com/package/@stdlib/array-float32\n\n[@stdlib/array/float64]: https://www.npmjs.com/package/@stdlib/array-float64\n\n[@stdlib/array/int16]: https://www.npmjs.com/package/@stdlib/array-int16\n\n[@stdlib/array/int32]: https://www.npmjs.com/package/@stdlib/array-int32\n\n[@stdlib/array/int8]: https://www.npmjs.com/package/@stdlib/array-int8\n\n[@stdlib/array/uint16]: https://www.npmjs.com/package/@stdlib/array-uint16\n\n[@stdlib/array/uint8]: https://www.npmjs.com/package/@stdlib/array-uint8\n\n[@stdlib/array/uint8c]: https://www.npmjs.com/package/@stdlib/array-uint8c\n\n<!-- </related-links> -->\n\n</section>\n\n<!-- /.links -->\n","readmeFilename":"README.md"}